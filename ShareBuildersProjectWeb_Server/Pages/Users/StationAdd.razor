@page "/Stations/StationAdd"
@inject StationService stationService
@inject AffiliateService affiliateService
@inject BroadcastTypeService broadcastTypeService
@inject MarketService marketService

<MudText Typo="Typo.h4">New Station Creation</MudText>

<br />

<MudButton OnClick="OnSubmitNewStation" 
    Variant="Variant.Filled" 
    StartIcon="@Icons.Material.Filled.Send" 
    Color="Color.Success"
    Size="Size.Small"
    >Create Station
</MudButton>

<br /><br />

<MudTextField
    Label="Call Letters" 
    T="string"
    @bind-Value="_newStation.CallLetters"
    Immediate="true" 
    Counter="50" 
    HelperText="Max 50 characters"
    MaxLength="50"
    Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"
    Variant="Variant.Outlined">
</MudTextField>

<br />

<MudTextField
    Label="Owner"
    T="string"
    @bind-Value="_newStation.Owner"
    Immediate="true" 
    Counter="50" 
    HelperText="Max 50 characters"
    MaxLength="50"
    Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"
    Variant="Variant.Outlined">
</MudTextField>

<br />

<MudTextField
    Label="Format"
    T="string"
    @bind-Value="_newStation.Format"
    Immediate="true" 
    Counter="50" 
    HelperText="Max 50 characters"
    MaxLength="50"
    Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"
    Variant="Variant.Outlined">
</MudTextField>

<br />

<MudSelect 
    T="string" 
    Label="Affiliates" 
    MultiSelection="true" 
    @bind-Value="_displayedAffiliateValues" 
    @bind-SelectedValues="_selectedAffiliateValues"
    Variant="Variant.Outlined">

    @foreach(var affiliate in _affiliateList)
    {
        <MudSelectItem T="string" Value="@affiliate.ShortName">@affiliate.ShortName</MudSelectItem>
    }
</MudSelect>

<MudSelect 
    T="string" 
    Label="BroadcastType" 
    MultiSelection="true" 
    @bind-Value="_displayedBroadcastTypeValues" 
    @bind-SelectedValues="_selectedBroadcastTypeValues"
    Variant="Variant.Outlined">

    @foreach(var broadcastType in _broadcastTypeList)
    {
        <MudSelectItem T="string" Value="@broadcastType.Name">@broadcastType.Name</MudSelectItem>
    }
</MudSelect>

<MudSelect 
    T="string" 
    Label="Markets" 
    MultiSelection="true" 
    @bind-Value="_displayedMarketValues" 
    @bind-SelectedValues="_selectedMarketValues"
    Variant="Variant.Outlined">

    @foreach(var market in _marketsList)
    {
        <MudSelectItem T="string" Value="@market.Name">@market.Name</MudSelectItem>
    }
</MudSelect>

@code {
    private StationUiDTO _newStation = new StationUiDTO();

    private string _displayedAffiliateValues = "";
    private IEnumerable<string> _selectedAffiliateValues = new List<string>();
    private IEnumerable<Affiliate> _affiliateList = new List<Affiliate>();

    private string _displayedBroadcastTypeValues = "";
    private IEnumerable<string> _selectedBroadcastTypeValues = new List<string>();
    private IEnumerable<BroadcastType> _broadcastTypeList = new List<BroadcastType>();

    private string _displayedMarketValues = "";
    private IEnumerable<string> _selectedMarketValues = new List<string>();
    private IEnumerable<Market> _marketsList = new List<Market>();

    //Get all stations
    protected override async Task OnInitializedAsync()
    {
        var affiliateData = affiliateService.GetAllAffiliates();
        _affiliateList = affiliateData.ToList();

        var broadcastTypeData = broadcastTypeService.GetAllBroadcastTypes();
        _broadcastTypeList = broadcastTypeData.ToList();

        var marketData = marketService.GetAllMarkets();
        _marketsList = marketData.ToList();
    }

    //Submit new station
    private void OnSubmitNewStation()
    {
        //Correlate affiliate selection with id for composite table
        var affiliateCompositeList = new List<int>();
        foreach(var selectedAffiliate in _selectedAffiliateValues)
        {
            foreach(var affiliate in _affiliateList)
            {
                if(selectedAffiliate == affiliate.ShortName)
                {
                    affiliateCompositeList.Add((int)affiliate.Id);
                    break;
                }
            }
        }

        //Correlate broadcastType selection with id for composite table
        var broadcastTypeCompositeList = new List<int>();
        foreach(var selectedBroadcastType in _selectedBroadcastTypeValues)
        {
            foreach(var broadcastType in _broadcastTypeList)
            {
                if(selectedBroadcastType == broadcastType.Name)
                {
                    broadcastTypeCompositeList.Add((int)broadcastType.Id);
                    break;
                }
            }
        }

        //Correlate affiliate selection with id for composite table
        var marketCompositeList = new List<int>();
        foreach(var selectedMarket in _selectedMarketValues)
        {
            foreach(var market in _marketsList)
            {
                if(selectedMarket == market.Name)
                {
                    marketCompositeList.Add((int)market.Id);
                    break;
                }
            }
        }

        //Convert selection lists to arrays
        int[] affiliateCompositeArray = affiliateCompositeList.ToArray();
        int[] broadcastTypeCompositeArray = broadcastTypeCompositeList.ToArray();
        int[] marketCompositeArray = marketCompositeList.ToArray();

        var newStation = new StationAddUpdateDTO()
            {
                CallLetters = _newStation.CallLetters,
                Owner = _newStation.Owner,
                Format = _newStation.Format,
                AffiliateIds = affiliateCompositeArray,
                BroadcastTypeIds = broadcastTypeCompositeArray,
                MarketIds = marketCompositeArray
            };

        //Create new station
        stationService.CreateStation(newStation);
    }

    private IEnumerable<string> MaxCharacters(string chars)
    {
        if(!string.IsNullOrEmpty(chars) && 50 < chars?.Length)
            yield return "Max 50 characters";
    }
}