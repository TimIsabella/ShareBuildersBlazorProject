@page "/Users/UserTableOLD"
@inject UserService userService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h6">User Account Details Edit</MudText>
<MudSpacer />

@if(itemSelected == true)
{ 
    <MudText Inline="true">Current Selection:  <b>@selectedItemBeforeEdit?.FirstName @selectedItemBeforeEdit?.LastName</b></MudText>
    <br /> <br />
    <MudButton OnClick="OnDeleteButtonClick" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete User</MudButton>
}

<br />

<MudTable 
    Items="@Elements"
    @bind-SelectedItem="selectedItem"
    Dense=true 
    Hover=true 
    ReadOnly=false 
    CanCancelEdit=true
    IsEditRowSwitchingBlocked=false 
    Filter="new Func<UserUiDTO,bool>(FilterFunc)"
    SortLabel="Sort By"
    RowEditPreview="OnRowEdit"
    RowEditCommit="SubmitChanges"
    CommitEditTooltip="Commit Changes" 
    RowEditCancel="DiscardChanges"
    CancelEditTooltip="Discard Changes" 
    OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" 
    ApplyButtonPosition=TableApplyButtonPosition.End>

    <ToolBarContent>
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>

    <col style="width:50px;" />

    </ColGroup>

    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<UserUiDTO, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<UserUiDTO, object>(x=>x.FirstName)">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<UserUiDTO, object>(x=>x.LastName)">Last Name</MudTableSortLabel></MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="First Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.LastName</MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="First Name">
            <MudTextField @bind-Value="@context.FirstName" Required />
        </MudTd>

        <MudTd DataLabel="Last Name">
            <MudTextField @bind-Value="@context.LastName" Required />
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private string searchString = "";
    private bool itemSelected;
    private UserUiDTO selectedItem;
    private UserUiDTO selectedItemBeforeEdit;
    private IEnumerable<UserUiDTO> Elements = new List<UserUiDTO>();

    protected override async Task OnInitializedAsync()
    {
        var response = userService.GetAllUsersAssignedToStations();
        Elements = response.ToList();

        Console.WriteLine("OnInitializedAsync()");
    }

    //Backup item for cancel
    private void OnRowEdit(object element)
    {
        selectedItemBeforeEdit = new()
            {
                Id = ((UserUiDTO)element).Id,
                FirstName = ((UserUiDTO)element).FirstName,
                LastName = ((UserUiDTO)element).LastName,
            };

        itemSelected = true;

        Console.WriteLine("OnRowEdit(object element)");
    }

    //Cancel changes and reset to original
    private void DiscardChanges(object element)
    {
        ((UserUiDTO)element).FirstName = selectedItemBeforeEdit.FirstName;
        ((UserUiDTO)element).LastName = selectedItemBeforeEdit.LastName;

        itemSelected = false;

        Console.WriteLine("DiscardChanges(object element)");
    }

    //Submit changes
    private void SubmitChanges(object element)
    {
        var updatedUser = new UserAddUpdateDTO()
            {
                Id = ((UserUiDTO)element).Id,
                FirstName = ((UserUiDTO)element).FirstName,
                LastName = ((UserUiDTO)element).LastName,
            };

        userService.Update(updatedUser);

        itemSelected = false;

        Console.WriteLine("SubmitChanges(object element)");
    }

    private void OnDeleteButtonClick()
    {
        itemSelected = false;

        Console.WriteLine("OnDeleteButtonClick()");
    }

    //Search filter
    private bool FilterFunc(UserUiDTO element)
    {
        if(string.IsNullOrWhiteSpace(searchString))
            return true;
        if(element.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if(element.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    } 
}